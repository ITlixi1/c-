################################################# ##三子棋
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "game.h"
#include <windows.h>
#include<stdlib.h>
#include<time.h>
 

void Menu()
{
	printf("###########################\n");
	printf("###1.play      0.exit######\n");
	printf("###########################\n");
}


void Game()
{
		int board[Row][Col] = {' '};
		Initcheck(board,Row,Col);//初始化棋盘
		Putcheck(board, Row, Col); //输出棋盘
		srand((unsigned)time(NULL));
		Menu2();
		printf("请选择—>");
		int input2;
		scanf("%d", &input2);
		int w = 0;
		if (input2== 1)
		{
			int* p = &board[0][0];
			int k = 0;
			while (k < Row * Col)
			{
				My_Part(p, Row, Col);
				k++;//我下棋
				Putcheck(board, Row, Col);
				if (k > 2)
					w = Gudje(p, Row, Col);
				if (w == 1)
				break;
				Sleep(1000);
				if (k < 9)
				{
					printf("机器已下：\n");
					Report_Part(p, Row, Col);
					k++;//机器下棋
					Putcheck(board, Row, Col);//输出棋盘
					if (k > 5)
						w = Gudje(p, Row, Col);
					if (w == 1)
					break;
				}
				
			}
			if (k == 9 && w == 0)
				printf("<--平——局-->\n");
		}
		else
		{
			int* p = &board[0][0];
			int k = 0;
			while (k <Row * Col)
			{
                Sleep(1000);
				printf("机器已下：\n");
				Report_Part(p, Row, Col);
				Putcheck(p, Row, Col);
				if (k > 2)
					w=Gudje(p, Row, Col);
				if (w == 1)
				break;
				k++;//我下棋				
				if (k < 9)
				{
					My_Part(board, Row, Col);
					Putcheck(board, Row, Col);//输出棋盘
					k++;//机器下棋
					if (k > 5)
						w=Gudje(p, Row, Col);
					if (w==1)
					break;
				}

			}
			if(k==9&&w==0)
				printf("<--平——局-->\n");
		}
}

int main()
{
	int input=0;
	do
	{
		Menu();
		printf("请输入->");
	    scanf("%d", &input);
		switch (input)
		{
		case 1:
			printf("    <--开始游戏-->\n");
			Game();
			break;
		case 0:
			printf("    <--成功退出游戏-->\n");
		default:
			printf("选择错误，重新选择\n");
			break;
		}
	}while(input);
	
	return 0;
}
*********************
#define Row 3
#define Col 3
#include <stdio.h>

void Initcheck(int board[Row][Col], int row, int col);
void Putcheck(int board[Row][Col], int row, int col); 
void Menu2();
void My_Part(int *p, int row, int col);
void Report_Part(int* p, int row, int col);
int Gudje(int* p, int row, int col);
*********************************
#define _CRT_SECURE_NO_WARNINGS
#include "game.h"



void Initcheck(int board[Row][Col], int row, int col)
{
	int i=0;
	int j=0;
	for(i=0;i<row;i++)
	{
		for (j=0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}

}
void Putcheck(int board[Row][Col], int row, int col)
{
	int i;
	int j;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			printf("  %c  ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
		for (j = 0; j < col; j++)
		{
			if(i<row-1)
				printf("_____");
			else
				printf("     ");
			if (j < col - 1)
				printf("|");
		}
		printf("\n");
	}
}

void Menu2()//界面2
{
	printf("###################################\n");
	printf("##1.you first     0.report first##\n");
	printf("###################################\n");

}
void My_Part(int *p, int row, int col)
{
	printf("输入几行几列\n");
	int m=0, n=0;
	scanf("%d%d", &m, &n);
	*(p + (m-1)* col + n-1)='#';
}
void Report_Part(int* p, int row, int col)
{

	while (1) 
	{
	int m = rand()%row;
	int n = rand() % col+1; 
	if (*(p + m * col + n) == ' ')
	{
		*(p + m  * col + n) = '*';
		break;
	}
	}
}
int Gudje(int* p, int row, int col)
{
	int i;
	for (i = 0; i < row; i++)//判断纵横
	{
		if (*(p + i * col + 0) == *(p + i * col + 1) && *(p + i * col + 0) == *(p + i * col + 2) && *(p + i * col + 0) == '#')
		{
			printf("你赢了！！\n");
			return 1;
		}
		if (*(p + i * col + 0) == *(p + i * col + 1) && *(p + i * col + 0) == *(p + i * col + 2) && *(p + i * col + 0) == '*')
		{
			printf("机器赢了哦!\n");
			return 1;
		}	
	}
	for (i = 0; i < col; i++)//判断纵横
	{
		if (*(p + 0 * col + i) == *(p + 1 * col + i) && *(p + 1 * col + i) == *(p + 2 * col + i) && *(p + 0 * col + i) == '#')
		{
			printf("你赢了！！\n");
				return 1;
		}
		if (*(p + 0 * col + i) == *(p + 1 * col + i) && *(p + 1 * col + i) == *(p + 2 * col + i) && *(p + 0 * col + i) == '*')
		{
			printf("机器赢了哦!\n");
			return 1;
		}
	}
	if (*p == *(p + 4) && *(p + 4) == *(p + 8) && *p == '#')
	{
		printf("你赢了！！\n");
		return 1;
	}
	else if (*(p + 2) == *(p + 4) && *(p + 4) == *(p + 6) && *p == '*')
	{

		printf("机器赢了哦!\n");
		return 1;
	}
	else
		return 0;
}
#################################################################
